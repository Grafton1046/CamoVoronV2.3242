    

[gcode_macro probe_test]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28;
    {% endif %}
    g1 x175 y175 z20 f10000
    probe_accuracy

# run repeated Probe Accuracy tests, docking between each to see if Z is drifting
[gcode_macro Probe_Accuracy_Repeats]
gcode:
    #Parameters
    {% set i = params.I|default(1)|int %}
    SAVE_GCODE_STATE NAME=REPEATS_TEST
    {% for iteration in range(i|int) %}
        probe_accuracy
    {% endfor %}
    RESTORE_GCODE_STATE NAME=REPEATS_TEST

    # run repeated Probe Accuracy tests, docking between each to see if Z is drifting
[gcode_macro Probe_Accuracy_Corners]
gcode:
    #Parameters
    {% set i = params.I|default(1)|int %}
    {% set d = params.d|default('false') %}
    SAVE_GCODE_STATE NAME=REPEATS_TEST
    {% for iteration in range(i|int) %}
    G90
    Attach_probe
        G0 X30 Y12 F12000
        probe_accuracy dock={d}
        G0 X30 Y250 F12000
        probe_accuracy dock={d}
        G0 X270 Y250 F12000
        probe_accuracy dock={d}
        G0 X270 Y12 F12000
        probe_accuracy dock={d}
        G0 X150 Y150 F12000
        probe_accuracy dock={d}
    {% endfor %}
    Detach_Probe
    RESTORE_GCODE_STATE NAME=REPEATS_TEST

[gcode_macro Flow_rate_test]
gcode:
    # Parameters
    {% set nozzletemp = params.NOZZLETEMP|int %}
    {% set flow = params.FLOW|int %}
    M104 S{nozzletemp}       ;begin heating nozzle
    M106 s128            ; part cooling fan to 50%
   {% if printer.toolhead.homed_axes != "xyz" %}
      G28;
    {% endif %}
    g1 x175 y175 z160 f10000     ;center printhead in print volume 
    M109 S{nozzletemp}       ;make sure nozzel is to temp
    m83                  ;set extruder in absolute mode
    g92 e0               ; reset extruder
    g1 E50 F{(flow/2.404063)*60} ;converts from mm3/s to extruder speed 

[gcode_macro BED_MESH_LOAD]
description: Load an existing mesh or generate a new one
gcode:
  ##### get target get temperature #####
  {% set bed_temp = printer.heater_bed.target|int %}
  ##### join everything to a single mesh name #####
  {% set mesh_name = "Bed_Temp-" + bed_temp|string + "C" %}
  ##### end of definitions #####
  {% if printer.configfile.config["bed_mesh " + mesh_name] is defined %}
    M117 Loaded Old Mesh
    BED_MESH_CLEAR
    BED_MESH_PROFILE LOAD={mesh_name}
  {% else %}
    M117 Creating New Mesh
    BED_MESH_CALIBRATE PROFILE={mesh_name}
    {action_respond_info("Run SAVE_CONFIG after the print to store the mesh")}
  {% endif %}

[gcode_macro NEW_MESH]
description: Create new bed mesh at current target bed temperature
gcode:
 ##### get target get temperature #####
  {% set bed_temp = printer.heater_bed.target|int %}
  {% set mesh_name = "Bed_Temp-" + bed_temp|string + "C" %}
  M117 Waiting Bed Temp
  M190 S{bed_temp}
  M117 Waiting 15 Mins
  G4 P900000
  M117 Home and QGL
  G32
  M117 Creating New Mesh
  BED_MESH_CALIBRATE PROFILE={mesh_name}
  M117 Saving Bed Mesh {mesh_name}
  SAVE_CONFIG


[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(105) | float %}
    {% set DURATION = (params.DURATION | default(15) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_PIN PIN=chamber_lights VALUE=0.5
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
     M106 s128

    ;; put the bed and nozzle where they're a safe distance apart
    CENTER

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }
    status_soaking
    knob_status_heating
    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
        status_soaking
        knob_status_heating

    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
        status_soaking # sets the nozzle colors
        knob_status_heating
        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
            RESPOND PREFIX=tgnotify MSG="Heat soak complete, you may begin printing."
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}



[gcode_macro CENTER]
gcode:
    # {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
    #   {action_respond_info("Cannot do that while printing")}
    # {% else %}
    {% if printer.toolhead.homed_axes != "xyz" %}
      G28;
    {% endif %}
    g1 x175 y220 z120 f10000;
    # {% endif %}



[gcode_macro PA_CAL]
# Pressure Advance Simple Test macro.
# Usage: PA_CAL BED=100 EXTRUDER=240 PA_START=0.0 PA_STOP=0.1 NZL=0.4
# Or with no parameters, this would execute the same as
# PA_CAL BED=99 EXTRUDER=239 PA_START=0.0 PA_STOP=0.1 NZL=(as per printer.cfg)
# First prints a line with current set PA, then prints 21 additional line segments
# starting with PA_START, and increasing to PA_STOP.
# Based http://realdeuce.github.io/Voron/PA/pressure_advance.html
# Assisted by u/imoftendisgruntled, u/scul86, and thanks to u/beansisfat, u/stray_r

description: Tune Pressure Advance
gcode:
    {% if printer.idle_timeout.state == "Printing" or printer.pause_resume.is_paused %}
        {action_respond_info("Cannot do that while printing")}
    {% else %}
        {% set BED = params.BED|default(99)|float %}
        {% set EXTRUDER = params.EXTRUDER|default(239)|float %}
        {% set PA_START = params.PA_START|default(0.0)|float %}
        {% set PA_STOP = params.PA_STOP|default(0.1)|float %}
        {% set PA_STEP = (PA_STOP - PA_START) / 20 |float %}
        {% set NZL_CFG = printer.configfile.config["extruder"]["nozzle_diameter"]|float %}
        {% set NZL = params.NZL|default(NZL_CFG)|float %}
        {% set E20 = (0.1147475 * NZL) * 20|float %}
        {% set E40 = (0.1147475 * NZL) * 40|float %}
        {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
        {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}

        PRINT_START BED={BED} HOTEND={EXTRUDER}
		
        G21 ; Millimeter units
        G90 ; Absolute XYZ
        M83 ; Relative E
        SET_VELOCITY_LIMIT ACCEL=3000 ACCEL_TO_DECEL=1500
        G92 E0
        M106 S0 
		
        G1 X{(X_MID-40)} Y{(Y_MID-65)} F30000          ; move to start position
        G1 Z0.25 F300                                  ; move to layer height
        G1 E0.75 F1800                                 ; un-retract
        G1 X{(X_MID-20)} Y{(Y_MID-65)} E{E20} F300     ; print line part one
        G1 X{(X_MID+20)} Y{(Y_MID-65)} E{E40} F9000    ; print line part two
        G1 X{(X_MID+40)} Y{(Y_MID-65)} E{E20} F300     ; print line part three
        G1 E-0.75 F1800                                ; retract
        G1 Z1 F300                                     ; Move above layer height  
		
        {% for i in range(0, 20) %}
            SET_PRESSURE_ADVANCE ADVANCE={PA_START + (i * PA_STEP)} ; set Pressure Advance
            M117 Testing Pressure Advance at: {PA_START + (i * PA_STEP)}, increased PA by {PA_STEP}.
            G1 X{(X_MID-40)} Y{(Y_MID-35)+(5*i)} F30000           ; move to start position
            G1 Z0.25 F300                                         ; move to layer height
            G1 E0.75 F1800                                        ; un-retract
            G1 X{(X_MID-20)} Y{(Y_MID-35)+(5*i)} E{E20} F300      ; print line part one
            G1 X{(X_MID+20)} Y{(Y_MID-35)+(5*i)} E{E40} F9000     ; print line part two
            G1 X{(X_MID+40)} Y{(Y_MID-35)+(5*i)} E{E20} F300      ; print line part three
            G1 E-0.75 F1800                                       ; retract
            G1 Z1 F300                                            ; Move above layer height  
        {% endfor %}

        M117 Find best line and multiply it by ({PA_START} + (line * {PA_STEP}) ) to find your PA setting.
		
        PRINT_END
		
    {% endif %}

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(20)|int %}
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Output parameters to g-code terminal
	{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

	{% for i in range(iterations) %}
		# Large pattern
			# Diagonals
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
			
			# Box
			G0 X{x_min} Y{y_min} F{speed*60}
			G0 X{x_min} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_max} F{speed*60}
			G0 X{x_max} Y{y_min} F{speed*60}
		
		# Small pattern
			# Small diagonals 
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
			
			# Small box
			G0 X{x_center_min} Y{y_center_min} F{speed*60}
			G0 X{x_center_min} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_max} F{speed*60}
			G0 X{x_center_max} Y{y_center_min} F{speed*60}
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30*60}
		G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

# [gcode_macro SEARCH_VARS]
# gcode:
#     {% set search = params.S|lower %}
#     {% set ns = namespace() %}
#     {% for item in printer  %}
#         {% if ' ' in item %}
#             {% set ns.path = ['printer', "['%s']" % (item), ''] %}
#         {% else %}
#             {% set ns.path = ['printer.', item, ''] %}
#         {% endif %} 

#         {% if search in ns.path|lower %}
#             { action_respond_info(ns.path|join) }
#         {% endif %} 

#         {% if printer[item].items() %}
#             {% for childkey, child in printer[item].items() recursive %}
#                 {% set ns.path = ns.path[:loop.depth|int + 1] %}

#                 {% if ' ' in childkey %}
#                     {% set null = ns.path.append("['%s']" % (childkey)) %}
#                 {% else %}
#                     {% set null = ns.path.append(".%s" % (childkey)) %}
#                 {% endif %} 

#                 {% if child is mapping  %}
#                     { loop(child.items()) }
#                 {% else %}
#                     {% if search in ns.path|lower %}
#                         { action_respond_info("%s : %s" % (ns.path|join, child)) }
#                     {% endif %} 
#                 {% endif %} 

#             {% endfor %}
#         {% endif %} 
#     {% endfor %}
	#Usage in console: SEARCH_VARS s="profile"